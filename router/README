# Simple Router

CSC458 Assignment1 Fall 2019
Team members: Ziqi Chen, Ben Wong

## Description
A simple router that receives Ethenet frames, processes packets by handling ARPs, IP, TCP/UDP, and ICMP packets, and forwards them to correct interface. The project runs on top of mininet.

## Requirements
The router must successfully route packets between the Internet and the application servers.
The router must correctly handle ARP requests and replies.
The router must correctly handle traceroutes through it (where it is not the end host) and to it (where it is the end host).
The router must respond correctly to ICMP echo requests.
The router must handle TCP/UDP packets sent to one of its interfaces. In this case the router should respond with an ICMP port unreachable.
The router must maintain an ARP cache whose entries are invalidated after a timeout period (timeouts should be on the order of 15 seconds).
The router must queue all packets waiting for outstanding ARP replies. If a host does not respond to 5 ARP requests, the queued packet is dropped and an ICMP host unreachable message is sent back to the source of the queued packet.
The router must not needlessly drop packets (for example when waiting for an ARP reply)
The router must enforce guarantees on timeoutsâ€“that is, if an ARP request is not responded to within a fixed period of time, the ICMP host unreachable message is generated even if no more packets arrive at the router.

## File Structure
-Router
    -sr_handler_arp.c
        Includes all functions that needed to handle an arp reply or arp request.
        -arp handler handles two cases:
                1. when arp is req, simply send a reply back to client
                2. when arp is rep, cache the replyer's ip and mac, then process the request in cache that's supposed to be sent to this replyer
    -sr_handler_icmp.c
        Includes all functions that needed to handle icmp packets.
                1. if icmp protocol -> if for itself, do reply, else forward it
                2. if udp tcp protocol -> sent icmp_t3 back with correct type and code
    -sr_handler_ip.c 
        Includes all functions that needed to handle ip packets.
                1. do sanity check
                2. do ttl
                3. do lmp on rt and find target to forward packet
                4. if there is cache, do forward, else do broadcast
    -sr_helpers.c
        Some helper functions including sanity check, get header and etc..

## Decisions to be made
1.  At first we wanted to seperate set_eth_header\set_ip_header\and set_icmp_header, but found out this could cause many problems without careful implementation
, so most of functions discarded the use of these functions.

2.  Instead of having all the handler in router we decided to seperate them out for easier management.
3.  We decided to seperate icmp out as a single handler just like arp and ip, just for easy management, also different group members can work on differnt subject
without conflict.
4.  we added icmp types and code in protocol in case we forget where it is.

